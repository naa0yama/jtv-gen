#!/usr/bin/env bash

# Japanese TV Content Generator (JTV Gen) Script - Simple amatsukaze compatible version
# Generates Japanese TV broadcast dummy files

set -euxo pipefail

INTERVAL=29
VIDEO_OPT="-minrate 1M -b:v 6M -maxrate 12M"

rm -rfv temp/combined.ts final_v2.ts
mkdir -p temp

dump_psi() {
  local filename="${1}"
  local pids=(
    '0x0000,pat'
    '0x0010,nit'
    '0x0011,sdt'
    '0x0012,eit'
    '0x0014,tot'
    '0x0101,pmt'
  )

  mkdir -p temp/psi
  for item in "${pids[@]}"; do
    IFS=',' read -r pid name <<< "$item"
    echo "tstables, PID: $pid, Name: $name"
    tstables --japan --pid $pid --xml-output  "temp/psi/${name}.xml" "$filename"
  done
}
#dump_psi "original_6min.ts"
#exit 1

generate_test_file() {
    local filename="$1"

    if [ ! -f "temp/${filename}" ]; then
        ffmpeg -y -hide_banner \
               -f lavfi -i "testsrc=duration=${INTERVAL}:size=1280x720:rate=30000/1001,format=yuv420p" \
               -f lavfi -i "anullsrc=channel_layout=stereo:sample_rate=48000:duration=0.5" \
               -f lavfi -i "sine=frequency=1000:duration=${INTERVAL}" \
               -f lavfi -i "anullsrc=channel_layout=stereo:sample_rate=48000:duration=0.5" \
               -filter_complex "
                [1:a]volume=-70dB[a_silence1];
                [2:a]volume=-14dB,alimiter=limit=-3dB:attack=5:release=50[a_content];
                [3:a]volume=-70dB[a_silence2];
                [a_silence1][a_content][a_silence2]concat=n=3:v=0:a=1,asetpts=PTS-STARTPTS[a];
                [0:v]format=yuv420p,fps=30000/1001,setpts=PTS-STARTPTS[v]
               " \
               -map "[v]" -map "[a]" \
               -c:v mpeg2video -aspect 16:9 -profile:v main -level:v high \
               ${VIDEO_OPT} \
               -c:a aac -profile:a aac_low -ar 48000 -ac 2 -b:a 248k \
               -fflags +genpts \
               -avoid_negative_ts make_zero \
               -muxdelay 0 -muxpreload 0 \
               "temp/${filename}"
    fi
}

generate_test_file "_stest_1.ts" &
generate_test_file "_stest_2.ts" &
wait

cat > temp/filelist.txt << EOF
file '_stest_1.ts'
file '_stest_2.ts'

EOF

DEFAULT_SERVICE_ID=65024
DEFAULT_TRANSPORT_STREAM_ID=$(( (RANDOM % 65535) + 1 ))
DEFAULT_ORIGINAL_NETWORK_ID=$(( (RANDOM % 65535) + 1 ))
DEFAULT_SERVICE_NAME="JTV Gen"
DEFAULT_SERVICE_PROVIDER="FFmpeg"
DEFAULT_NETWORK_NAME="Generated by naa0yama"
DEFAULT_START_TIME="2024-12-31 15:00:00"

ffmpeg -y -hide_banner \
       -fflags +genpts+igndts \
       -avoid_negative_ts make_zero \
       -f concat -safe 0 -i temp/filelist.txt \
       -c:v copy -c:a copy \
       -mpegts_service_id "${DEFAULT_SERVICE_ID}" \
       -mpegts_transport_stream_id "${DEFAULT_TRANSPORT_STREAM_ID}" \
       -mpegts_flags +resend_headers \
       -mpegts_start_pid 273 \
       -mpegts_pmt_start_pid 257 \
       -metadata service_provider="${DEFAULT_SERVICE_PROVIDER}" \
       -metadata service_name="${DEFAULT_SERVICE_NAME}" \
       -muxrate 2500000 \
       temp/combined.ts
#tsanalyze temp/combined.ts && exit 1


#- -----------------------------------------------------------------------------
# Global PID's                          PID       kbps    ms
#   PAT (Program Association Table)  0x0000(  0)  15.0   100 required
#   NIT (Network Information Table)  0x0010( 16)   1.5  1000 receiver
#   SDT (Service Description Table)  0x0011( 17)   0.8  2000 required from ARIB
#   EIT (Event Information Table)    0x0012( 18)  70.0  1000 required from EPG
#   TOT (Time Offset Table)          0x0014( 20)   0.3  5000 Time JST
# Service  PID's
#   PCR                              0x0100(256)
#   PMT (Program Map Table)          0x0101(257)   30.1   100 required
#   MPEG-2 Video                     0x0111(273)    8.83mbps
#   MPEG-2 AAC                       0x0112(274)  248.0
# PAT/NIT/SDT/EIT/TOT/PMT SUM                117.7  (7MB/min)
#
#- Amatsukaze で必要な PSI/SI 情報
# PNSET
# TOT   放送日時
# SDT   チャンネル
# EIT   ジャンル
# PMT   映像サイズ


# シンプルなamatsukaze互換TSファイル生成（jtv_gen.sh方式）
echo "Simple amatsukaze compatible TS generation using jtv_gen method..."

# Calculate duration for EIT
duration=$(ffprobe -v error -show_entries format=duration -of csv=p=0 "temp/combined.ts")
duration_hms=$(printf "%02d:%02d:%02d" $((${duration%.*}/3600)) $(((${duration%.*}%3600)/60)) $((${duration%.*}%60)))

# PAT - Program Association Table
cat > temp/pat.xml << EOF
<?xml version="1.0" encoding="UTF-8"?>
<tsduck>
  <PAT version="3" current="true" transport_stream_id="${DEFAULT_TRANSPORT_STREAM_ID}" network_PID="16">
    <service service_id="${DEFAULT_SERVICE_ID}" program_map_PID="257"/>
  </PAT>
</tsduck>
EOF

# NIT - Network Information Table
cat > temp/nit.xml << EOF
<?xml version="1.0" encoding="UTF-8"?>
<tsduck>
  <NIT version="1" actual="true" current="true" network_id="${DEFAULT_ORIGINAL_NETWORK_ID}">
    <network_name_descriptor network_name="${DEFAULT_NETWORK_NAME}"/>
    <transport_stream transport_stream_id="${DEFAULT_TRANSPORT_STREAM_ID}"
                      original_network_id="${DEFAULT_ORIGINAL_NETWORK_ID}">
      <service_list_descriptor>
        <service service_id="${DEFAULT_SERVICE_ID}" service_type="1"/>
      </service_list_descriptor>
    </transport_stream>
  </NIT>
</tsduck>
EOF

# SDT - Service Description Table
cat > temp/sdt.xml << EOF
<?xml version="1.0" encoding="UTF-8"?>
<tsduck>
  <SDT version="1" actual="true" current="true"
       transport_stream_id="${DEFAULT_TRANSPORT_STREAM_ID}"
       original_network_id="${DEFAULT_ORIGINAL_NETWORK_ID}">
    <service service_id="${DEFAULT_SERVICE_ID}"
             EIT_schedule="false"
             EIT_present_following="true"
             running_status="running"
             CA_mode="false">
      <service_descriptor
          service_type="1"
          service_provider_name="${DEFAULT_SERVICE_PROVIDER}"
          service_name="${DEFAULT_SERVICE_NAME}"/>
    </service>
  </SDT>
</tsduck>
EOF

# EIT - Event Information Table (PF: Present/Following)
cat > temp/eit.xml << EOF
<?xml version="1.0" encoding="UTF-8"?>
<tsduck>
  <EIT version="1" actual="true" current="true"
       service_id="${DEFAULT_SERVICE_ID}"
       transport_stream_id="${DEFAULT_TRANSPORT_STREAM_ID}"
       original_network_id="${DEFAULT_ORIGINAL_NETWORK_ID}"
       last_table_id="78" type="pf">
    <event event_id="1001" start_time="${DEFAULT_START_TIME}"
           duration="${duration_hms}" running_status="running" CA_mode="false">
      <short_event_descriptor language_code="jpn">
        <event_name>${DEFAULT_SERVICE_NAME} Program</event_name>
        <text>ARIB compliant test stream</text>
      </short_event_descriptor>
      <component_descriptor stream_content="1" stream_content_ext="15" component_type="3" component_tag="0"
       language_code="jpn" text=""/>
      <content_descriptor>
        <content content_nibble_level_1="0" content_nibble_level_2="0" user_byte="0"/>
        <content content_nibble_level_1="1" content_nibble_level_2="0" user_byte="0"/>
      </content_descriptor>
    </event>
  </EIT>
</tsduck>
EOF

# TOT - Time Offset Table
cat > temp/tot.xml << EOF
<?xml version="1.0" encoding="UTF-8"?>
<tsduck>
  <TOT UTC_time="${DEFAULT_START_TIME}">
    <local_time_offset_descriptor>
      <region country_code="JPN"
              country_region_id="0"
              local_time_offset="540"
              time_of_change="2000-01-01 00:00:00"
              next_time_offset="540"/>
    </local_time_offset_descriptor>
  </TOT>
</tsduck>
EOF

# PMT - Program Map Table
cat > temp/pmt.xml << EOF
<?xml version="1.0" encoding="UTF-8"?>
<tsduck>
  <PMT version="1" service_id="${DEFAULT_SERVICE_ID}" PCR_PID="273" current="true">
    <component elementary_PID="273" stream_type="0x02">
      <stream_identifier_descriptor component_tag="0"/>
    </component>
    <component elementary_PID="274" stream_type="0x0F">
      <stream_identifier_descriptor component_tag="16"/>
    </component>
  </PMT>
</tsduck>
EOF

# XML→binコンパイル
echo "Compiling PSI/SI tables..."
tstabcomp --japan temp/pat.xml -o temp/pat.bin
tstabcomp --japan temp/nit.xml -o temp/nit.bin
tstabcomp --japan temp/sdt.xml -o temp/sdt.bin
tstabcomp --japan temp/eit.xml -o temp/eit.bin
tstabcomp --japan temp/tot.xml -o temp/tot.bin
tstabcomp --japan temp/pmt.xml -o temp/pmt.bin

# jtv_gen.sh方式のシンプルなPSI/SI注入
#   PAT (Program Association Table)  0x0000(  0)  15.0   100 required
#   NIT (Network Information Table)  0x0010( 16)   1.5  1000 receiver
#   SDT (Service Description Table)  0x0011( 17)   0.8  2000 required from ARIB
#   EIT (Event Information Table)    0x0012( 18)  70.0  1000 required from EPG
#   TOT (Time Offset Table)          0x0014( 20)   0.3  5000 Time JST
# Service  PID's
#   PCR                              0x0100(256)
#   PMT (Program Map Table)          0x0101(257)   30.1   100 required

# inject
#   NIT 0x0010( 16)
#   EIT 0x0012( 18)
#   TOT 0x0014( 20)
# replace
#   PAT 0x0000(  0)
#   SDT 0x0011( 17)
#   PMT 0x0101(257)
echo "Injecting basic PSI/SI metadata..."
tsp --japan -I file temp/combined.ts \
    -P inject temp/pmt.bin --pid 257 --replace \
    -P inject temp/sdt.bin --pid 17 --replace \
    -P inject temp/nit.bin --pid 16 --inter-packet 250 \
    -P inject temp/eit.bin --pid 18 --inter-packet 250 \
    -P inject temp/tot.bin --pid 20 --inter-packet 1250 \
    -P pcradjust \
    -P inject temp/pat.bin --pid 0 --replace \
    -P continuity --fix \
    -O file final_v2.ts

tsanalyze final_v2.ts
