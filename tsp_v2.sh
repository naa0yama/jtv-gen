#!/usr/bin/env bash

# Japanese TV Content Generator (JTV Gen) Script
# TSDuck test scirpt

set -euo pipefail

INTERVAL=29
VIDEO_OPT="-minrate 1M -b:v 6M -maxrate 12M"
WORKDIR=temp/v2

DEFAULT_SERVICE_ID=65024
DEFAULT_TRANSPORT_STREAM_ID=$(( (RANDOM % 65535) + 1 ))
DEFAULT_ORIGINAL_NETWORK_ID=$(( (RANDOM % 65535) + 1 ))
DEFAULT_SERVICE_NAME="JTV Gen"
DEFAULT_SERVICE_PROVIDER="FFmpeg"
DEFAULT_NETWORK_NAME="Generated by naa0yama"
DEFAULT_START_TIME="2024-12-31 15:00:00"

dump_psi() {
  local filename="${1}"
  local pids=(
    '0x0000,pat'
    '0x0010,nit'
    '0x0011,sdt'
    '0x0012,eit'
    '0x0014,tot'
    '0x0101,pmt'
  )

  mkdir -p "${WORKDIR}/psi"
  for item in "${pids[@]}"; do
    IFS=',' read -r pid name <<< "$item"
    echo "tstables, PID: $pid, Name: $name"
    tstables --japan --pid $pid --xml-output  "${WORKDIR}/psi/${name}.xml" "$filename"
  done
}

generate_test_files() {
  local file_count="${1:-2}"
  local filenames=()

  # 指定された数のファイルを並列生成
  for ((i=1; i<=file_count; i++)); do
    local filename="_stest_${i}.ts"
    filenames+=("$filename")

    if [ ! -f "${WORKDIR}/${filename}" ]; then
      ffmpeg -y -hide_banner \
        -f lavfi -i "testsrc=duration=${INTERVAL}:size=1280x720:rate=30000/1001,format=yuv420p" \
        -f lavfi -i "anullsrc=channel_layout=stereo:sample_rate=48000:duration=0.5" \
        -f lavfi -i "sine=frequency=1000:duration=${INTERVAL}" \
        -f lavfi -i "anullsrc=channel_layout=stereo:sample_rate=48000:duration=0.5" \
        -filter_complex "
        [1:a]volume=-70dB[a_silence1];
        [2:a]volume=-14dB,alimiter=limit=-3dB:attack=5:release=50[a_content];
        [3:a]volume=-70dB[a_silence2];
        [a_silence1][a_content][a_silence2]concat=n=3:v=0:a=1,asetpts=PTS-STARTPTS[a];
        [0:v]setpts=PTS-STARTPTS,fps=30000/1001,format=yuv420p[v]
        " \
        -map "[v]" -map "[a]" \
        -c:v mpeg2video -aspect 16:9 -profile:v main -level:v high \
        ${VIDEO_OPT} \
        -c:a aac -profile:a aac_low -ar 48000 -ac 2 -b:a 248k \
        -fflags +genpts \
        -avoid_negative_ts make_zero \
        -muxdelay 0 -muxpreload 0 \
        "${WORKDIR}/${filename}" &
    fi
  done

  # 全ての並列処理の完了を待つ
  wait

  # filelist.txtを生成
  {
    for filename in "${filenames[@]}"; do
      echo "file '${filename}'"
    done
    echo
  } > "${WORKDIR}/filelist.txt"

  echo "Generated ${file_count} test files and created filelist.txt"
}

configure_service_and_combine() {
  ffmpeg -y -hide_banner \
    -fflags +genpts+igndts \
    -avoid_negative_ts make_zero \
    -f concat -safe 0 -i "${WORKDIR}/filelist.txt" \
    -c:v copy -c:a copy \
    -mpegts_service_id "${DEFAULT_SERVICE_ID}" \
    -mpegts_transport_stream_id "${DEFAULT_TRANSPORT_STREAM_ID}" \
    -mpegts_start_pid 273 \
    -mpegts_pmt_start_pid 257 \
    -metadata service_provider="${DEFAULT_SERVICE_PROVIDER}" \
    -metadata service_name="${DEFAULT_SERVICE_NAME}" \
    -f mpegts \
    "${WORKDIR}/combined.ts"

  echo "TS generation using jtv_gen method..."
}


generate_psi_si_tables() {
  # Calculate duration for EIT
  local duration
  local duration_hms
  duration=$(ffprobe -v error -show_entries format=duration -of csv=p=0 "${WORKDIR}/combined.ts")
  duration_hms=$(printf "%02d:%02d:%02d" $((${duration%.*}/3600)) $(((${duration%.*}%3600)/60)) $((${duration%.*}%60)))

  # PAT - Program Association Table
  cat > "${WORKDIR}/pat.xml" << EOF
<?xml version="1.0" encoding="UTF-8"?>
<tsduck>
  <PAT version="3" current="true" transport_stream_id="${DEFAULT_TRANSPORT_STREAM_ID}" network_PID="16">
    <service service_id="${DEFAULT_SERVICE_ID}" program_map_PID="257"/>
  </PAT>
</tsduck>
EOF

  # NIT - Network Information Table
  cat > "${WORKDIR}/nit.xml" << EOF
<?xml version="1.0" encoding="UTF-8"?>
<tsduck>
  <NIT version="1" actual="true" current="true" network_id="${DEFAULT_ORIGINAL_NETWORK_ID}">
    <network_name_descriptor network_name="${DEFAULT_NETWORK_NAME}"/>
    <transport_stream transport_stream_id="${DEFAULT_TRANSPORT_STREAM_ID}"
                      original_network_id="${DEFAULT_ORIGINAL_NETWORK_ID}">
      <service_list_descriptor>
        <service service_id="${DEFAULT_SERVICE_ID}" service_type="1"/>
      </service_list_descriptor>
    </transport_stream>
  </NIT>
</tsduck>
EOF

  # SDT - Service Description Table
  cat > "${WORKDIR}/sdt.xml" << EOF
<?xml version="1.0" encoding="UTF-8"?>
<tsduck>
  <SDT version="1" actual="true" current="true"
       transport_stream_id="${DEFAULT_TRANSPORT_STREAM_ID}"
       original_network_id="${DEFAULT_ORIGINAL_NETWORK_ID}">
    <service service_id="${DEFAULT_SERVICE_ID}"
             EIT_schedule="false"
             EIT_present_following="true"
             running_status="running"
             CA_mode="false">
      <service_descriptor
          service_type="1"
          service_provider_name="${DEFAULT_SERVICE_PROVIDER}"
          service_name="${DEFAULT_SERVICE_NAME}"/>
    </service>
  </SDT>
</tsduck>
EOF

  # EIT - Event Information Table (PF: Present/Following)
  cat > "${WORKDIR}/eit.xml" << EOF
<?xml version="1.0" encoding="UTF-8"?>
<tsduck>
  <EIT version="1" actual="true" current="true"
       service_id="${DEFAULT_SERVICE_ID}"
       transport_stream_id="${DEFAULT_TRANSPORT_STREAM_ID}"
       original_network_id="${DEFAULT_ORIGINAL_NETWORK_ID}"
       last_table_id="78" type="pf">
    <event event_id="1001" start_time="${DEFAULT_START_TIME}"
           duration="${duration_hms}" running_status="running" CA_mode="false">
      <short_event_descriptor language_code="jpn">
        <event_name>${DEFAULT_SERVICE_NAME} Program</event_name>
        <text>ARIB compliant test stream</text>
      </short_event_descriptor>
      <component_descriptor stream_content="1" stream_content_ext="15" component_type="3" component_tag="0"
                            language_code="jpn" text=""/>
      <content_descriptor>
        <content content_nibble_level_1="0" content_nibble_level_2="0" user_byte="0"/>
        <content content_nibble_level_1="1" content_nibble_level_2="0" user_byte="0"/>
      </content_descriptor>
    </event>
  </EIT>
</tsduck>
EOF

  # TOT - Time Offset Table
  cat > "${WORKDIR}/tot.xml" << EOF
<?xml version="1.0" encoding="UTF-8"?>
<tsduck>
  <TOT UTC_time="${DEFAULT_START_TIME}">
    <local_time_offset_descriptor>
      <region country_code="JPN"
              country_region_id="0"
              local_time_offset="540"
              time_of_change="2000-01-01 00:00:00"
              next_time_offset="540"/>
    </local_time_offset_descriptor>
  </TOT>
</tsduck>
EOF

  # PMT - Program Map Table
  cat > "${WORKDIR}/pmt.xml" << EOF
<?xml version="1.0" encoding="UTF-8"?>
<tsduck>
  <PMT version="12" current="true" service_id="${DEFAULT_SERVICE_ID}" PCR_PID="273">
    <component elementary_PID="273" stream_type="0x02">
      <stream_identifier_descriptor component_tag="0"/>
    </component>
    <component elementary_PID="274" stream_type="0x0F">
      <stream_identifier_descriptor component_tag="16"/>
    </component>
  </PMT>
</tsduck>
EOF

  echo "Compiling PSI/SI tables..."
  for pid in pat nit sdt eit tot pmt
  do
    tstabcomp --japan "${WORKDIR}/${pid}.xml" -o "${WORKDIR}/${pid}.bin"
    if [[ -f "${WORKDIR}/${pid}.bin" ]]; then
        echo "✓ ${pid}.bin created"
    else
        echo "⚠ ${pid}.bin not available"
    fi
  done
}

#- -----------------------------------------------------------------------------
# Global PID's                          PID         Inject/Replace
#   PAT (Program Association Table)  0x0000(  0)    replace
#   NIT (Network Information Table)  0x0010( 16)    inject
#   SDT (Service Description Table)  0x0011( 17)    replace
#   EIT (Event Information Table)    0x0012( 18)    inject
#   TOT (Time Offset Table)          0x0014( 20)    inject
# Service  PID's
#   PMT (Program Map Table)          0x0101(257)    replace
#   MPEG-2 Video                     0x0111(273)
#   MPEG-2 AAC Audio                 0x0112(274)
# PAT/NIT/SDT/EIT/TOT/PMT SUM                    64 kbps (3.84MB/min)
# --inter-packet 250   #  250 * 4ms ≈ 1s
main() {
  local DUMP_MODE=false
  local DUMP_FILE=""

  if [[ $# -gt 0 && "$1" == "--dump" ]]; then
    if [[ $# -lt 2 ]]; then
      echo "Usage: $0 --dump <filename>"
      exit 1
    fi
    DUMP_FILE="$2"
    if [[ ! -f "$DUMP_FILE" ]]; then
      echo "Error: File '$DUMP_FILE' not found"
      exit 1
    fi
    DUMP_MODE=true
  fi

  # ダンプモードの処理
  if [[ "$DUMP_MODE" == true ]]; then
    mkdir -p "${WORKDIR}"
    echo "Dumping PSI/SI tables from: $DUMP_FILE"
    dump_psi "$DUMP_FILE"
    echo "PSI/SI tables dumped to: ${WORKDIR}/psi/"
    exit 0
  fi

  # 通常モードの処理
  rm -rfv "${WORKDIR}/combined.ts" final_v2.ts
  mkdir -p "${WORKDIR}"

  generate_test_files 2
  configure_service_and_combine
  generate_psi_si_tables

  echo "Injecting basic PSI/SI metadata..."
  tsp --japan --add-input-stuffing 1/25 \
    -I file "${WORKDIR}/combined.ts" \
    -P inject "${WORKDIR}/pat.bin" --pid 0 --replace \
    -P inject "${WORKDIR}/nit.bin" --pid 16 --inter-packet $((  1000/4 )) \
    -P inject "${WORKDIR}/sdt.bin" --pid 17 --replace \
    -P inject "${WORKDIR}/eit.bin" --pid 18 --inter-packet $((  1000/4 )) \
    -P inject "${WORKDIR}/tot.bin" --pid 20 --inter-packet $(( 10000/4 )) \
    -P inject "${WORKDIR}/pmt.bin" --pid 257 --replace \
    -P continuity --fix \
    -O file final_v2.ts
  tsanalyze final_v2.ts
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  main "$@"
fi
